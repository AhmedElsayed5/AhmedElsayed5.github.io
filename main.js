!function(){"use strict";class e{constructor(e,t,s,i,r,n,o){this._cardOwner=s,this._name=e.name,this._link=e.link,this._likeCount=e.likes.length,this._likes=e.likes,this._cardSelector=t,this._handleCardClick=i,this._handleDeleteClick=r,this._userId=e.owner._id,this._handleLikeClick=o,this._cardId=e._id}_setCardViewElements(){this._cardImage=this._element.querySelector(".card__image"),this._cardTitle=this._element.querySelector(".card__title"),this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),"owner"!==this._cardOwner&&(this._deleteButton.hidden=!0),this._cardLikeCount=this._element.querySelector(".card__like-count")}_setCardView(){this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this.updateLikes(this._likes),this._cardLikeCount.textContent=0===this._likeCount?" ":this._likeCount}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLikeClick())),"owner"===this._cardOwner&&this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick()})),this._cardImage.addEventListener("click",(()=>{this._handleCardClick()}))}handleDeleteIcon(){this._element.remove(),this._element=null}setLikeInfo(e){this._likes=e.likes}updateLikes(){this._cardLikeCount.textContent=this._likes.length,this._likes.some((e=>e._id===this._userId))?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}_getTemplate(){return document.querySelector(this._cardSelector).content.cloneNode(!0).querySelector(".card")}getView(){return this._element=this._getTemplate(),this._setCardViewElements(),this._setCardView(),this._setEventListeners(),this._element}}class t{constructor(e,t){this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._form=e,this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_hideInputError=e=>{const t=this._form.querySelector(`.${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""};_showInputError=e=>{const t=this._form.querySelector(`.${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)};_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_checkFormValidity(){return!this._inputList.every((e=>e.validity.valid))}_toggleButtonState(){this._checkFormValidity()?this.disableButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e){this._modal=document.querySelector(e),this._closeButton=this._modal.querySelector(".modal__close-button")}open(){this._modal.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._modal.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_closeModalWithOutsideClick(e){!e.target.closest(".modal__body")&&e.target.closest(".modal_opened")&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),document.addEventListener("mousedown",(e=>this._closeModalWithOutsideClick(e)))}}class i extends s{constructor(e,t){super(e),this._modalForm=this._modal.querySelector("form"),this._handleFormSubmit=t,this._submitButton=this._modal.querySelector(".modal__save-button"),this._inputList=Array.from(this._modalForm.querySelectorAll(".modal__input"))}close(){this._modalForm.reset(),super.close()}_getInputValues(){this._inputList=Array.from(this._modalForm.querySelectorAll(".modal__input"));let e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}renderLoading(e,t){this._submitButton.textContent=e?"Loading...":t}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}class r{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(){this._items.forEach(this._renderer)}}const n={formSelector:".form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"},o=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}getApiInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkResponse)}updateProfileInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkResponse)}addNewCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._checkResponse)}deleteUserCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}addCardLikes(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}removeCardLikes(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateProfileAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"95eecadc-0eb0-4813-b742-082777f22573","Content-Type":"application/json"}}),a=new class{constructor(e,t,s){this._profileName=document.querySelector(e),this._profileJob=document.querySelector(t),this._userAvatar=document.querySelector(s)}getUserInfo(){return{name:this._profileName.textContent,job:this._profileJob.textContent,avatar:this.getAvatar()}}setUserInfo(e){let{name:t,about:s,avatar:i}=e;this._profileName.textContent=t,this._profileJob.textContent=s,this.setAvatar(i)}setAvatar(e){this._userAvatar.alt=this.getUserInfo().name,this._userAvatar.src=e}getAvatar(){return this._userAvatar.src}}(".profile__title",".profile__description",".profile__image"),l=new i("#profile-modal",(e=>{l.renderLoading(!0),o.updateProfileInfo({name:e.name,about:e.about}).then((e=>{a.setUserInfo(e),l.close(),l.renderLoading(!1,"Save")})).catch((e=>console.log(e)))})),d=new i("#edit-avatar-modal",(e=>{d.renderLoading(!0),o.updateProfileAvatar(e.avatar).then((e=>{a.setAvatar(e.avatar),d.close(),d.renderLoading(!1,"Save")})).catch((e=>{console.log(e)})).finally((()=>{}))}));document.querySelector(".profile__image-edit").addEventListener("click",(function(){d.open(),d.setEventListeners(),h.disableButton()}));const h=new t(document.querySelector("#modal__form-edit-avatar"),n);h.enableValidation();const c=new class extends s{constructor(e){super(e),this._confirmButton=this._modal.querySelector(".delete-image-modal__button")}open(e){super.open(),this._id=e}setEventListeners(){super.setEventListeners(),this._confirmButton.addEventListener("click",(e=>{this._handleDeleteSubmit()}))}renderLoading(e){this._saveButton.textContent=e?"Loading...":"Yes"}setSubmitAction(e){this._handleDeleteSubmit=e}}("#delete-image-modal");let _;c.setEventListeners();const u=new class extends s{constructor(e){super(e),this._image=this._modal.querySelector(".modal__screen-image"),this._imageTitle=this._modal.querySelector(".modal__title-image")}open(e){let{name:t,link:s}=e;super.open(),this._image.src=s,this._image.alt=t,this._imageTitle.textContent=t}}("#image-modal");u.setEventListeners();const m=(t,s,i)=>{const r=new e(t,"#card",s,(()=>{u.open({name:t.name,link:t.link})}),(()=>{c.open(t._id),c.setSubmitAction((()=>{o.deleteUserCard(t._id).then((()=>{c.close(),r.handleDeleteIcon()}))}))}),i,(()=>{r._likes.some((e=>e._id===t.owner._id))?o.removeCardLikes(r._cardId).then((e=>{r.setLikeInfo(e),r.updateLikes()})).catch((e=>{console.log(e)})):o.addCardLikes(r._cardId).then((e=>{r.setLikeInfo(e),r.updateLikes()})).catch((e=>{console.log(e)}))}));return r.getView()},p=new i("#card-modal",(e=>{let{name:t,link:s}=e;p.renderLoading(!0),o.addNewCard({name:t,link:s}).then((e=>{_.addItem(m(e,"owner")),p.close(),p.renderLoading(!1,"Save")}))})),v=new t(document.querySelector("#formProfile"),n);v.enableValidation();const k=new t(document.querySelector("#modal__form-addCard"),n);k.enableValidation(),document.querySelector(".profile__edit-button").addEventListener("click",(function(){const e=a.getUserInfo(),t=document.querySelector("#name"),s=document.querySelector("#job");t.value=e.name,s.value=e.job,v.disableButton(),l.open()})),l.setEventListeners(),document.querySelector(".profile__add-button").addEventListener("click",(function(){k.disableButton(),p.open()})),p.setEventListeners(),o.getApiInfo().then((e=>{let[t,s]=e;a.setUserInfo(t),_=new r({items:s,renderer:function(e){_.addItem(m(e,e.owner._id===t._id?"owner":"non-owner",t))}},".cards__list"),_.renderItems()})).catch((e=>{console.error("Error fetching API info:",e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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L3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvcG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9wb3B1cFdpdGhDb25maXJtYXRpb24uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBkYXRhLFxuICAgIGNhcmRTZWxlY3RvcixcbiAgICBjYXJkT3duZXIsXG4gICAgaGFuZGxlQ2FyZENsaWNrLFxuICAgIGhhbmRsZURlbGV0ZUNsaWNrLFxuICAgIGN1cnJlbnRVc2VyLFxuICAgIGhhbmRsZUxpa2VDbGlja1xuICApIHtcbiAgICB0aGlzLl9jYXJkT3duZXIgPSBjYXJkT3duZXI7XG4gICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcbiAgICB0aGlzLl9saW5rID0gZGF0YS5saW5rO1xuICAgIHRoaXMuX2xpa2VDb3VudCA9IGRhdGEubGlrZXMubGVuZ3RoO1xuICAgIHRoaXMuX2xpa2VzID0gZGF0YS5saWtlcztcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XG4gICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrID0gaGFuZGxlQ2FyZENsaWNrO1xuICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrID0gaGFuZGxlRGVsZXRlQ2xpY2s7XG4gICAgdGhpcy5fdXNlcklkID0gZGF0YS5vd25lci5faWQ7XG4gICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrID0gaGFuZGxlTGlrZUNsaWNrO1xuICAgIHRoaXMuX2NhcmRJZCA9IGRhdGEuX2lkO1xuICB9XG5cbiAgX3NldENhcmRWaWV3RWxlbWVudHMoKSB7XG4gICAgdGhpcy5fY2FyZEltYWdlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpO1xuICAgIHRoaXMuX2NhcmRUaXRsZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX190aXRsZVwiKTtcbiAgICB0aGlzLl9saWtlQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpO1xuICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19kZWxldGUtYnV0dG9uXCIpO1xuICAgIGlmICh0aGlzLl9jYXJkT3duZXIgIT09IFwib3duZXJcIikgdGhpcy5fZGVsZXRlQnV0dG9uLmhpZGRlbiA9IHRydWU7XG4gICAgdGhpcy5fY2FyZExpa2VDb3VudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWNvdW50XCIpO1xuICB9XG5cbiAgX3NldENhcmRWaWV3KCkge1xuICAgIHRoaXMuX2NhcmRJbWFnZS5zcmMgPSB0aGlzLl9saW5rO1xuICAgIHRoaXMuX2NhcmRJbWFnZS5hbHQgPSB0aGlzLl9uYW1lO1xuICAgIHRoaXMuX2NhcmRUaXRsZS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XG4gICAgdGhpcy51cGRhdGVMaWtlcyh0aGlzLl9saWtlcyk7XG4gICAgdGhpcy5fY2FyZExpa2VDb3VudC50ZXh0Q29udGVudCA9XG4gICAgICB0aGlzLl9saWtlQ291bnQgPT09IDAgPyBcIiBcIiA6IHRoaXMuX2xpa2VDb3VudDtcbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9saWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLl9oYW5kbGVMaWtlQ2xpY2soKSk7XG4gICAgaWYgKHRoaXMuX2NhcmRPd25lciA9PT0gXCJvd25lclwiKVxuICAgICAgdGhpcy5fZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrKCk7XG4gICAgICB9KTtcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljaygpO1xuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlRGVsZXRlSWNvbigpIHtcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xuICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICB9XG5cbiAgc2V0TGlrZUluZm8oZGF0YSkge1xuICAgIHRoaXMuX2xpa2VzID0gZGF0YS5saWtlcztcbiAgfVxuXG4gIHVwZGF0ZUxpa2VzKCkge1xuICAgIHRoaXMuX2NhcmRMaWtlQ291bnQudGV4dENvbnRlbnQgPSB0aGlzLl9saWtlcy5sZW5ndGg7XG4gICAgLy8gaWYgKHRoaXMuX2xpa2VzLnNvbWUoKGxpa2UpID0+IGxpa2UuX2lkID09PSB0aGlzLl91c2VySWQuX2lkKSlcbiAgICBpZiAodGhpcy5fbGlrZXMuc29tZSgobGlrZSkgPT4gbGlrZS5faWQgPT09IHRoaXMuX3VzZXJJZCkpIHtcbiAgICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LmFkZChcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRUZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcbiAgICAgIC5jb250ZW50LmNsb25lTm9kZSh0cnVlKVxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZFwiKTtcbiAgfVxuXG4gIGdldFZpZXcoKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XG4gICAgdGhpcy5fc2V0Q2FyZFZpZXdFbGVtZW50cygpO1xuICAgIHRoaXMuX3NldENhcmRWaWV3KCk7XG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IoZm9ybUVsZW1lbnQsIHNldHRpbmdzKSB7XG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IHNldHRpbmdzLmlucHV0U2VsZWN0b3I7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBzZXR0aW5ncy5zdWJtaXRCdXR0b25TZWxlY3RvcjtcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcztcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBzZXR0aW5ncy5pbnB1dEVycm9yQ2xhc3M7XG4gICAgdGhpcy5fZXJyb3JDbGFzcyA9IHNldHRpbmdzLmVycm9yQ2xhc3M7XG4gICAgdGhpcy5fZm9ybSA9IGZvcm1FbGVtZW50O1xuICAgIHRoaXMuX2lucHV0TGlzdCA9IEFycmF5LmZyb20oXG4gICAgICB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvcilcbiAgICApO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XG4gIH1cblxuICBfaGlkZUlucHV0RXJyb3IgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuICB9O1xuXG4gIF9zaG93SW5wdXRFcnJvciA9IChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoYC4ke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgKTtcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZTtcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTtcbiAgfTtcblxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIF9jaGVja0Zvcm1WYWxpZGl0eSgpIHtcbiAgICByZXR1cm4gIXRoaXMuX2lucHV0TGlzdC5ldmVyeShcbiAgICAgIChpbnB1dEVsZW1lbnQpID0+IGlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZFxuICAgICk7XG4gIH1cblxuICBfdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XG4gICAgaWYgKHRoaXMuX2NoZWNrRm9ybVZhbGlkaXR5KCkpIHtcbiAgICAgIHRoaXMuZGlzYWJsZUJ1dHRvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoZXZ0KSA9PiB7XG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dCk7XG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGRpc2FibGVCdXR0b24oKSB7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cF9TZWxlY3Rvcikge1xuICAgIHRoaXMuX21vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cF9TZWxlY3Rvcik7XG4gICAgdGhpcy5fY2xvc2VCdXR0b24gPSB0aGlzLl9tb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jbG9zZS1idXR0b25cIik7XG4gIH1cblxuICBvcGVuKCkge1xuICAgIHRoaXMuX21vZGFsLmNsYXNzTGlzdC5hZGQoXCJtb2RhbF9vcGVuZWRcIik7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5fbW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsX29wZW5lZFwiKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XG4gIH1cblxuICBfaGFuZGxlRXNjQ2xvc2UgPSAoZXZ0KSA9PiB7XG4gICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgX2Nsb3NlTW9kYWxXaXRoT3V0c2lkZUNsaWNrKGV2dCkge1xuICAgIGlmIChcbiAgICAgICFldnQudGFyZ2V0LmNsb3Nlc3QoXCIubW9kYWxfX2JvZHlcIikgJiZcbiAgICAgIGV2dC50YXJnZXQuY2xvc2VzdChcIi5tb2RhbF9vcGVuZWRcIilcbiAgICApXG4gICAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9jbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5jbG9zZSgpKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChldnQpID0+XG4gICAgICB0aGlzLl9jbG9zZU1vZGFsV2l0aE91dHNpZGVDbGljayhldnQpXG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm1zIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0KSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fbW9kYWxGb3JtID0gdGhpcy5fbW9kYWwucXVlcnlTZWxlY3RvcihcImZvcm1cIik7XG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fbW9kYWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fc2F2ZS1idXR0b25cIik7XG4gICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcbiAgICAgIHRoaXMuX21vZGFsRm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vZGFsX19pbnB1dFwiKVxuICAgICk7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLl9tb2RhbEZvcm0ucmVzZXQoKTtcbiAgICBzdXBlci5jbG9zZSgpO1xuICB9XG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcbiAgICB0aGlzLl9pbnB1dExpc3QgPSBBcnJheS5mcm9tKFxuICAgICAgdGhpcy5fbW9kYWxGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2lucHV0XCIpXG4gICAgKTtcbiAgICBsZXQgaW5wdXRWYWx1ZXMgPSB7fTtcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgIGlucHV0VmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGlucHV0VmFsdWVzO1xuICB9XG5cbiAgcmVuZGVyTG9hZGluZyhmbGFnLCB0ZXh0VmFsdWUpIHtcbiAgICBpZiAoZmxhZykgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gXCJMb2FkaW5nLi4uXCI7XG4gICAgZWxzZSB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSB0ZXh0VmFsdWU7XG4gIH1cblxuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuX21vZGFsRm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcbiAgICAgIC8vIHRoaXMuX21vZGFsRm9ybS5yZXNldCgpO1xuICAgICAgLy8gdGhpcy5jbG9zZSgpO1xuICAgIH0pO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XG4gIH1cblxuICBhZGRJdGVtKGVsZW1lbnQpIHtcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcbiAgfVxuXG4gIHJlbmRlckl0ZW1zKCkge1xuICAgIHRoaXMuX2l0ZW1zLmZvckVhY2godGhpcy5fcmVuZGVyZXIpO1xuICB9XG59XG4iLCJpbXBvcnQgQ2FyZCBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkLmpzXCI7XG5pbXBvcnQgQXBpIGZyb20gXCIuLi9jb21wb25lbnRzL0FwaS5qc1wiO1xuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSBcIi4uL3V0aWxzL3V0aWxzLmpzXCI7XG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL3BvcHVwV2l0aEZvcm0uanNcIjtcbmltcG9ydCBwb3B1cFdpdGhDb25maXJtYXRpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvcG9wdXBXaXRoQ29uZmlybWF0aW9uLmpzXCI7XG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG4vLyBpbXBvcnQgeyBlcnJvciB9IGZyb20gXCJjb25zb2xlXCI7XG5cbmNvbnN0IHNldHRpbmdzID0ge1xuICBmb3JtU2VsZWN0b3I6IFwiLmZvcm1cIixcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fc2F2ZS1idXR0b25cIixcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fc2F2ZS1idXR0b25fZGlzYWJsZWRcIixcbiAgaW5wdXRFcnJvckNsYXNzOiBcImZvcm1fX2lucHV0X3R5cGVfZXJyb3JcIixcbiAgZXJyb3JDbGFzczogXCJmb3JtX19pbnB1dC1lcnJvcl9hY3RpdmVcIixcbn07XG5cbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLm5vbW9yZXBhcnRpZXMuY28vdjEvZ3JvdXAtMTJcIixcbiAgaGVhZGVyczoge1xuICAgIGF1dGhvcml6YXRpb246IFwiOTVlZWNhZGMtMGViMC00ODEzLWI3NDItMDgyNzc3ZjIyNTczXCIsXG4gICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gIH0sXG59KTtcblxuLy8gRWRpdCBuYW1lIGFuZCBEZXNjcmlwdGlvblxuY29uc3QgdXNlciA9IG5ldyBVc2VySW5mbyhcbiAgXCIucHJvZmlsZV9fdGl0bGVcIixcbiAgXCIucHJvZmlsZV9fZGVzY3JpcHRpb25cIixcbiAgXCIucHJvZmlsZV9faW1hZ2VcIlxuKTtcbmNvbnN0IGVkaXRQcm9maWxlTW9kYWwgPSBuZXcgUG9wdXBXaXRoRm9ybShcIiNwcm9maWxlLW1vZGFsXCIsIChkYXRhKSA9PiB7XG4gIGVkaXRQcm9maWxlTW9kYWwucmVuZGVyTG9hZGluZyh0cnVlKTtcbiAgYXBpXG4gICAgLnVwZGF0ZVByb2ZpbGVJbmZvKHtcbiAgICAgIG5hbWU6IGRhdGEubmFtZSxcbiAgICAgIGFib3V0OiBkYXRhLmFib3V0LFxuICAgIH0pXG4gICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgdXNlci5zZXRVc2VySW5mbyhyZXMpO1xuICAgICAgZWRpdFByb2ZpbGVNb2RhbC5jbG9zZSgpO1xuICAgICAgZWRpdFByb2ZpbGVNb2RhbC5yZW5kZXJMb2FkaW5nKGZhbHNlLCBcIlNhdmVcIik7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycm9yKSA9PiBjb25zb2xlLmxvZyhlcnJvcikpO1xufSk7XG5cbi8vIEVkaXQgQXZhdGFyXG5jb25zdCBlZGl0UHJvZmlsZUF2YXRhciA9IG5ldyBQb3B1cFdpdGhGb3JtKFwiI2VkaXQtYXZhdGFyLW1vZGFsXCIsIChkYXRhKSA9PiB7XG4gIGVkaXRQcm9maWxlQXZhdGFyLnJlbmRlckxvYWRpbmcodHJ1ZSk7XG4gIGFwaVxuICAgIC51cGRhdGVQcm9maWxlQXZhdGFyKGRhdGEuYXZhdGFyKVxuICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgIHVzZXIuc2V0QXZhdGFyKHJlcy5hdmF0YXIpO1xuICAgICAgZWRpdFByb2ZpbGVBdmF0YXIuY2xvc2UoKTtcbiAgICAgIGVkaXRQcm9maWxlQXZhdGFyLnJlbmRlckxvYWRpbmcoZmFsc2UsIFwiU2F2ZVwiKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgLy8gYXZhdGFyUG9wdXAucmVuZGVyTG9hZGluZyhmYWxzZSwgXCJTYXZlXCIpO1xuICAgIH0pO1xufSk7XG5jb25zdCBwcm9maWxlQXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19pbWFnZS1lZGl0XCIpO1xucHJvZmlsZUF2YXRhci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlUHJvZmlsZUF2YXRhcik7XG5jb25zdCBlZGl0UHJvZmlsZUF2YXRhckZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIiNtb2RhbF9fZm9ybS1lZGl0LWF2YXRhclwiXG4pO1xuY29uc3QgZWRpdFByb2ZpbGVBdmF0YXJGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoXG4gIGVkaXRQcm9maWxlQXZhdGFyRm9ybSxcbiAgc2V0dGluZ3Ncbik7XG5lZGl0UHJvZmlsZUF2YXRhckZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuZnVuY3Rpb24gaGFuZGxlUHJvZmlsZUF2YXRhcigpIHtcbiAgZWRpdFByb2ZpbGVBdmF0YXIub3BlbigpO1xuICBlZGl0UHJvZmlsZUF2YXRhci5zZXRFdmVudExpc3RlbmVycygpO1xuICBlZGl0UHJvZmlsZUF2YXRhckZvcm1WYWxpZGF0b3IuZGlzYWJsZUJ1dHRvbigpO1xufVxuXG4vLyBEZWxldGUgY2FyZFxuXG5jb25zdCBkZWxldGVDYXJkTW9kYWwgPSBuZXcgcG9wdXBXaXRoQ29uZmlybWF0aW9uKFwiI2RlbGV0ZS1pbWFnZS1tb2RhbFwiKTtcbmRlbGV0ZUNhcmRNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xubGV0IGNhcmRTZWN0aW9uO1xuY29uc3QgaW1hZ2VGdWxsVmlldyA9IG5ldyBQb3B1cFdpdGhJbWFnZShcIiNpbWFnZS1tb2RhbFwiKTtcbmltYWdlRnVsbFZpZXcuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbmNvbnN0IGNyZWF0ZUNhcmQgPSAoZGF0YSwgY2FyZE93bmVyLCBjdXJyZW50VXNlcikgPT4ge1xuICBjb25zdCBjYXJkID0gbmV3IENhcmQoXG4gICAgZGF0YSxcbiAgICBcIiNjYXJkXCIsXG4gICAgY2FyZE93bmVyLFxuICAgICgpID0+IHtcbiAgICAgIGltYWdlRnVsbFZpZXcub3Blbih7IG5hbWU6IGRhdGEubmFtZSwgbGluazogZGF0YS5saW5rIH0pO1xuICAgIH0sXG4gICAgKCkgPT4ge1xuICAgICAgZGVsZXRlQ2FyZE1vZGFsLm9wZW4oZGF0YS5faWQpO1xuICAgICAgZGVsZXRlQ2FyZE1vZGFsLnNldFN1Ym1pdEFjdGlvbigoKSA9PiB7XG4gICAgICAgIGFwaS5kZWxldGVVc2VyQ2FyZChkYXRhLl9pZCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgZGVsZXRlQ2FyZE1vZGFsLmNsb3NlKCk7XG4gICAgICAgICAgY2FyZC5oYW5kbGVEZWxldGVJY29uKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBjdXJyZW50VXNlcixcbiAgICAoKSA9PiB7XG4gICAgICBpZiAoY2FyZC5fbGlrZXMuc29tZSgobGlrZSkgPT4gbGlrZS5faWQgPT09IGRhdGEub3duZXIuX2lkKSkge1xuICAgICAgICBhcGlcbiAgICAgICAgICAucmVtb3ZlQ2FyZExpa2VzKGNhcmQuX2NhcmRJZClcbiAgICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBjYXJkLnNldExpa2VJbmZvKHJlcyk7XG4gICAgICAgICAgICBjYXJkLnVwZGF0ZUxpa2VzKCk7IC8vIG1hZ2ljIGlzIGhlcmVcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBpXG4gICAgICAgICAgLmFkZENhcmRMaWtlcyhjYXJkLl9jYXJkSWQpXG4gICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgY2FyZC5zZXRMaWtlSW5mbyhyZXMpO1xuICAgICAgICAgICAgY2FyZC51cGRhdGVMaWtlcygpOyAvLyBtYWdpYyBpcyBoZXJlXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIHJldHVybiBjYXJkLmdldFZpZXcoKTtcbn07XG5cbi8vLyBhZGQgY2FyZFxuY29uc3QgYWRkQ2FyZE1vZGFsID0gbmV3IFBvcHVwV2l0aEZvcm0oXCIjY2FyZC1tb2RhbFwiLCAoeyBuYW1lLCBsaW5rIH0pID0+IHtcbiAgYWRkQ2FyZE1vZGFsLnJlbmRlckxvYWRpbmcodHJ1ZSk7XG4gIGFwaS5hZGROZXdDYXJkKHsgbmFtZSwgbGluayB9KS50aGVuKChyZXMpID0+IHtcbiAgICBjYXJkU2VjdGlvbi5hZGRJdGVtKGNyZWF0ZUNhcmQocmVzLCBcIm93bmVyXCIpKTtcbiAgICBhZGRDYXJkTW9kYWwuY2xvc2UoKTtcbiAgICBhZGRDYXJkTW9kYWwucmVuZGVyTG9hZGluZyhmYWxzZSwgXCJTYXZlXCIpO1xuICB9KTtcbn0pO1xuXG5jb25zdCBlZGl0ZVByb2ZpbGVGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtUHJvZmlsZVwiKTtcbmNvbnN0IGVkaXRlUHJvZmlsZUZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihlZGl0ZVByb2ZpbGVGb3JtLCBzZXR0aW5ncyk7XG5lZGl0ZVByb2ZpbGVGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcblxuY29uc3QgYWRkSW1hZ2VGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtb2RhbF9fZm9ybS1hZGRDYXJkXCIpO1xuY29uc3QgYWRkSW1hZ2VGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoYWRkSW1hZ2VGb3JtLCBzZXR0aW5ncyk7XG5hZGRJbWFnZUZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuXG5jb25zdCBlZGl0UHJvZmlsZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fZWRpdC1idXR0b25cIik7XG5lZGl0UHJvZmlsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlRWRpdFByb2ZpbGVCdXR0b24pO1xuZnVuY3Rpb24gaGFuZGxlRWRpdFByb2ZpbGVCdXR0b24oKSB7XG4gIGNvbnN0IGN1cnJlbnRVc2VyID0gdXNlci5nZXRVc2VySW5mbygpO1xuICBjb25zdCBjdXJyZW50VXNlck5hbWVQbGFjZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmFtZVwiKTtcbiAgY29uc3QgY3VycmVudFVzZXJKb2JQbGFjZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjam9iXCIpO1xuICBjdXJyZW50VXNlck5hbWVQbGFjZS52YWx1ZSA9IGN1cnJlbnRVc2VyLm5hbWU7XG4gIGN1cnJlbnRVc2VySm9iUGxhY2UudmFsdWUgPSBjdXJyZW50VXNlci5qb2I7XG4gIGVkaXRlUHJvZmlsZUZvcm1WYWxpZGF0b3IuZGlzYWJsZUJ1dHRvbigpO1xuICBlZGl0UHJvZmlsZU1vZGFsLm9wZW4oKTtcbn1cbmVkaXRQcm9maWxlTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuY29uc3QgYWRkQ2FyZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYWRkLWJ1dHRvblwiKTtcbmFkZENhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUFkZENhcmRCdXR0b24pO1xuZnVuY3Rpb24gaGFuZGxlQWRkQ2FyZEJ1dHRvbigpIHtcbiAgYWRkSW1hZ2VGb3JtVmFsaWRhdG9yLmRpc2FibGVCdXR0b24oKTtcbiAgYWRkQ2FyZE1vZGFsLm9wZW4oKTtcbn1cbmFkZENhcmRNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xuXG4vLy8gbmV3IHBhcnRcbmFwaVxuICAuZ2V0QXBpSW5mbygpXG4gIC50aGVuKChbdXNlckRhdGEsIHVzZXJDYXJkc10pID0+IHtcbiAgICB1c2VyLnNldFVzZXJJbmZvKHVzZXJEYXRhKTtcbiAgICBjYXJkU2VjdGlvbiA9IG5ldyBTZWN0aW9uKFxuICAgICAge1xuICAgICAgICBpdGVtczogdXNlckNhcmRzLFxuICAgICAgICByZW5kZXJlcjogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICBjYXJkU2VjdGlvbi5hZGRJdGVtKFxuICAgICAgICAgICAgY3JlYXRlQ2FyZChcbiAgICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgICAgaXRlbS5vd25lci5faWQgPT09IHVzZXJEYXRhLl9pZCA/IFwib3duZXJcIiA6IFwibm9uLW93bmVyXCIsXG4gICAgICAgICAgICAgIHVzZXJEYXRhXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBcIi5jYXJkc19fbGlzdFwiXG4gICAgKTtcbiAgICBjYXJkU2VjdGlvbi5yZW5kZXJJdGVtcygpO1xuICB9KVxuICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIEFQSSBpbmZvOlwiLCBlcnJvcik7XG4gIH0pO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpIHtcbiAgY29uc3RydWN0b3IoeyBiYXNlVXJsLCBoZWFkZXJzIH0pIHtcbiAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcbiAgICB0aGlzLl9oZWFkZXJzID0gaGVhZGVycztcbiAgfVxuXG4gIF9jaGVja1Jlc3BvbnNlKHJlcykge1xuICAgIGlmIChyZXMub2spIHtcbiAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yICR7cmVzLnN0YXR1c31gKTtcbiAgfVxuXG4gIGdldEFwaUluZm8oKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLmdldFVzZXJJbmZvKCksIHRoaXMuZ2V0SW5pdGlhbENhcmRzKCldKTtcbiAgfVxuXG4gIGdldFVzZXJJbmZvKCkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcbiAgfVxuXG4gIGdldEluaXRpYWxDYXJkcygpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XG4gIH1cblxuICB1cGRhdGVQcm9maWxlSW5mbyh1c2VyRGF0YSkge1xuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmFtZTogdXNlckRhdGEubmFtZSxcbiAgICAgICAgYWJvdXQ6IHVzZXJEYXRhLmFib3V0LFxuICAgICAgfSksXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcbiAgfVxuXG4gIGFkZE5ld0NhcmQoeyBuYW1lLCBsaW5rIH0pIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbmFtZSwgbGluayB9KSxcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xuICB9XG5cbiAgZGVsZXRlVXNlckNhcmQoY2FyZElkKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfWAsIHtcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcbiAgfVxuXG4gIC8vIHVwZGF0ZUxpa2VzKGxpa2VzKSB7XG4gIC8vICAgdGhpcy5fbGlrZXMgPSBsaWtlcztcbiAgLy8gICB0aGlzLnJlbmRlckxpa2VzKCk7XG4gIC8vIH1cblxuICBhZGRDYXJkTGlrZXMoY2FyZElkKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzL2xpa2VzLyR7Y2FyZElkfWAsIHtcbiAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcbiAgfVxuXG4gIHJlbW92ZUNhcmRMaWtlcyhjYXJkSWQpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvbGlrZXMvJHtjYXJkSWR9YCwge1xuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xuICB9XG5cbiAgdXBkYXRlUHJvZmlsZUF2YXRhcihhdmF0YXIpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBhdmF0YXIgfSksXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xuICBjb25zdHJ1Y3RvcihuYW1lU2VsZWN0b3IsIGpvYlNlbGVjdG9yLCB1c2VyQXZhdGFyKSB7XG4gICAgdGhpcy5fcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XG4gICAgdGhpcy5fcHJvZmlsZUpvYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioam9iU2VsZWN0b3IpO1xuICAgIHRoaXMuX3VzZXJBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHVzZXJBdmF0YXIpO1xuICB9XG4gIGdldFVzZXJJbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLl9wcm9maWxlTmFtZS50ZXh0Q29udGVudCxcbiAgICAgIGpvYjogdGhpcy5fcHJvZmlsZUpvYi50ZXh0Q29udGVudCxcbiAgICAgIGF2YXRhcjogdGhpcy5nZXRBdmF0YXIoKSxcbiAgICB9O1xuICB9XG4gIHNldFVzZXJJbmZvKHsgbmFtZSwgYWJvdXQsIGF2YXRhciB9KSB7XG4gICAgdGhpcy5fcHJvZmlsZU5hbWUudGV4dENvbnRlbnQgPSBuYW1lO1xuICAgIHRoaXMuX3Byb2ZpbGVKb2IudGV4dENvbnRlbnQgPSBhYm91dDtcbiAgICB0aGlzLnNldEF2YXRhcihhdmF0YXIpO1xuICB9XG5cbiAgc2V0QXZhdGFyKHZhbHVlKSB7XG4gICAgdGhpcy5fdXNlckF2YXRhci5hbHQgPSB0aGlzLmdldFVzZXJJbmZvKCkubmFtZTtcbiAgICB0aGlzLl91c2VyQXZhdGFyLnNyYyA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0QXZhdGFyKCkge1xuICAgIHJldHVybiB0aGlzLl91c2VyQXZhdGFyLnNyYztcbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHBvcHVwV2l0aENvbmZpcm1hdGlvbiBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xuICAgIHRoaXMuX2NvbmZpcm1CdXR0b24gPSB0aGlzLl9tb2RhbC5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCIuZGVsZXRlLWltYWdlLW1vZGFsX19idXR0b25cIlxuICAgICk7XG4gIH1cblxuICBvcGVuKGlkKSB7XG4gICAgc3VwZXIub3BlbigpO1xuICAgIHRoaXMuX2lkID0gaWQ7XG4gIH1cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9jb25maXJtQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PiB7XG4gICAgICB0aGlzLl9oYW5kbGVEZWxldGVTdWJtaXQoKTtcbiAgICB9KTtcbiAgfVxuICByZW5kZXJMb2FkaW5nKGlzTG9hZGluZykge1xuICAgIGlmIChpc0xvYWRpbmcpIHtcbiAgICAgIHRoaXMuX3NhdmVCdXR0b24udGV4dENvbnRlbnQgPSBcIkxvYWRpbmcuLi5cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2F2ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiWWVzXCI7XG4gICAgfVxuICB9XG4gIHNldFN1Ym1pdEFjdGlvbihoYW5kbGVEZWxldGVTdWJtaXQpIHtcbiAgICB0aGlzLl9oYW5kbGVEZWxldGVTdWJtaXQgPSBoYW5kbGVEZWxldGVTdWJtaXQ7XG4gIH1cbn1cbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xuICAgIHRoaXMuX2ltYWdlID0gdGhpcy5fbW9kYWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fc2NyZWVuLWltYWdlXCIpO1xuICAgIHRoaXMuX2ltYWdlVGl0bGUgPSB0aGlzLl9tb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX190aXRsZS1pbWFnZVwiKTtcbiAgfVxuICBvcGVuKHsgbmFtZSwgbGluayB9KSB7XG4gICAgc3VwZXIub3BlbigpO1xuICAgIHRoaXMuX2ltYWdlLnNyYyA9IGxpbms7XG4gICAgdGhpcy5faW1hZ2UuYWx0ID0gbmFtZTtcbiAgICB0aGlzLl9pbWFnZVRpdGxlLnRleHRDb250ZW50ID0gbmFtZTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkNhcmQiLCJjb25zdHJ1Y3RvciIsImRhdGEiLCJjYXJkU2VsZWN0b3IiLCJjYXJkT3duZXIiLCJoYW5kbGVDYXJkQ2xpY2siLCJoYW5kbGVEZWxldGVDbGljayIsImN1cnJlbnRVc2VyIiwiaGFuZGxlTGlrZUNsaWNrIiwidGhpcyIsIl9jYXJkT3duZXIiLCJfbmFtZSIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfbGlrZUNvdW50IiwibGlrZXMiLCJsZW5ndGgiLCJfbGlrZXMiLCJfY2FyZFNlbGVjdG9yIiwiX2hhbmRsZUNhcmRDbGljayIsIl9oYW5kbGVEZWxldGVDbGljayIsIl91c2VySWQiLCJvd25lciIsIl9pZCIsIl9oYW5kbGVMaWtlQ2xpY2siLCJfY2FyZElkIiwiX3NldENhcmRWaWV3RWxlbWVudHMiLCJfY2FyZEltYWdlIiwiX2VsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiX2NhcmRUaXRsZSIsIl9saWtlQnV0dG9uIiwiX2RlbGV0ZUJ1dHRvbiIsImhpZGRlbiIsIl9jYXJkTGlrZUNvdW50IiwiX3NldENhcmRWaWV3Iiwic3JjIiwiYWx0IiwidGV4dENvbnRlbnQiLCJ1cGRhdGVMaWtlcyIsIl9zZXRFdmVudExpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVEZWxldGVJY29uIiwicmVtb3ZlIiwic2V0TGlrZUluZm8iLCJzb21lIiwibGlrZSIsImNsYXNzTGlzdCIsImFkZCIsIl9nZXRUZW1wbGF0ZSIsImRvY3VtZW50IiwiY29udGVudCIsImNsb25lTm9kZSIsImdldFZpZXciLCJGb3JtVmFsaWRhdG9yIiwiZm9ybUVsZW1lbnQiLCJzZXR0aW5ncyIsIl9pbnB1dFNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9mb3JtIiwiX2lucHV0TGlzdCIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfc3VibWl0QnV0dG9uIiwiX2hpZGVJbnB1dEVycm9yIiwiaW5wdXRFbGVtZW50IiwiZXJyb3JFbGVtZW50IiwiaWQiLCJfc2hvd0lucHV0RXJyb3IiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2NoZWNrRm9ybVZhbGlkaXR5IiwiZXZlcnkiLCJfdG9nZ2xlQnV0dG9uU3RhdGUiLCJkaXNhYmxlQnV0dG9uIiwiZGlzYWJsZWQiLCJmb3JFYWNoIiwiaW5wdXQiLCJldnQiLCJlbmFibGVWYWxpZGF0aW9uIiwicHJldmVudERlZmF1bHQiLCJQb3B1cCIsInBvcHVwX1NlbGVjdG9yIiwiX21vZGFsIiwiX2Nsb3NlQnV0dG9uIiwib3BlbiIsIl9oYW5kbGVFc2NDbG9zZSIsImNsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImtleSIsIl9jbG9zZU1vZGFsV2l0aE91dHNpZGVDbGljayIsInRhcmdldCIsImNsb3Nlc3QiLCJzZXRFdmVudExpc3RlbmVycyIsIlBvcHVwV2l0aEZvcm1zIiwicG9wdXBTZWxlY3RvciIsImhhbmRsZUZvcm1TdWJtaXQiLCJzdXBlciIsIl9tb2RhbEZvcm0iLCJfaGFuZGxlRm9ybVN1Ym1pdCIsInJlc2V0IiwiX2dldElucHV0VmFsdWVzIiwiaW5wdXRWYWx1ZXMiLCJ2YWx1ZSIsInJlbmRlckxvYWRpbmciLCJmbGFnIiwidGV4dFZhbHVlIiwiU2VjdGlvbiIsIl9yZWYiLCJjb250YWluZXJTZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiYWRkSXRlbSIsImVsZW1lbnQiLCJwcmVwZW5kIiwicmVuZGVySXRlbXMiLCJmb3JtU2VsZWN0b3IiLCJhcGkiLCJiYXNlVXJsIiwiaGVhZGVycyIsIl9iYXNlVXJsIiwiX2hlYWRlcnMiLCJfY2hlY2tSZXNwb25zZSIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJnZXRBcGlJbmZvIiwiYWxsIiwiZ2V0VXNlckluZm8iLCJnZXRJbml0aWFsQ2FyZHMiLCJmZXRjaCIsIm1ldGhvZCIsInRoZW4iLCJ1cGRhdGVQcm9maWxlSW5mbyIsInVzZXJEYXRhIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJhYm91dCIsImFkZE5ld0NhcmQiLCJfcmVmMiIsImRlbGV0ZVVzZXJDYXJkIiwiY2FyZElkIiwiYWRkQ2FyZExpa2VzIiwicmVtb3ZlQ2FyZExpa2VzIiwidXBkYXRlUHJvZmlsZUF2YXRhciIsImF2YXRhciIsImF1dGhvcml6YXRpb24iLCJ1c2VyIiwibmFtZVNlbGVjdG9yIiwiam9iU2VsZWN0b3IiLCJ1c2VyQXZhdGFyIiwiX3Byb2ZpbGVOYW1lIiwiX3Byb2ZpbGVKb2IiLCJfdXNlckF2YXRhciIsImpvYiIsImdldEF2YXRhciIsInNldFVzZXJJbmZvIiwic2V0QXZhdGFyIiwiZWRpdFByb2ZpbGVNb2RhbCIsIlBvcHVwV2l0aEZvcm0iLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSIsImxvZyIsImVkaXRQcm9maWxlQXZhdGFyIiwiZXJyIiwiZmluYWxseSIsImVkaXRQcm9maWxlQXZhdGFyRm9ybVZhbGlkYXRvciIsImRlbGV0ZUNhcmRNb2RhbCIsIl9jb25maXJtQnV0dG9uIiwiX2hhbmRsZURlbGV0ZVN1Ym1pdCIsImlzTG9hZGluZyIsIl9zYXZlQnV0dG9uIiwic2V0U3VibWl0QWN0aW9uIiwiaGFuZGxlRGVsZXRlU3VibWl0IiwiY2FyZFNlY3Rpb24iLCJpbWFnZUZ1bGxWaWV3IiwiX2ltYWdlIiwiX2ltYWdlVGl0bGUiLCJjcmVhdGVDYXJkIiwiY2FyZCIsImFkZENhcmRNb2RhbCIsImVkaXRlUHJvZmlsZUZvcm1WYWxpZGF0b3IiLCJhZGRJbWFnZUZvcm1WYWxpZGF0b3IiLCJjdXJyZW50VXNlck5hbWVQbGFjZSIsImN1cnJlbnRVc2VySm9iUGxhY2UiLCJ1c2VyQ2FyZHMiLCJpdGVtIl0sInNvdXJjZVJvb3QiOiIifQ==